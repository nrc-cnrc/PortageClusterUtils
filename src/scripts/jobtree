#!/usr/bin/env perl

# @file jobtree
# @brief Create a tree from the output of jobst.
#
# @author Samuel Larkin and Darlene Stewart
#
# Traitement multilingue de textes / Multilingual Text Processing
# Tech. de l'information et des communications / Information and Communications Tech.
# Conseil national de recherches Canada / National Research Council Canada
# Copyright 2015, Sa Majeste la Reine du Chef du Canada /
# Copyright 2015, Her Majesty in Right of Canada

# /fs/ssm/main/base/20190814/all/bin/jobst --format json -f | jq '.[] | select(has("parallel_environment.nslots") | not)' | less
# ./jobtree -jobst /fs/ssm/main/base/20190814/all/bin/jobst -u sam037
# ./jobtree -jobst /fs/ssm/main/base/20190814/all/bin/jobst -g nrc_ict
# ./jobtree -jobst /fs/ssm/main/base/20180528/all/bin/jobst -u sam037
# ./jobtree -jobst /fs/ssm/main/base/20180528/all/bin/jobst -g nrc/ict

use strict;
use warnings;
use JSON;
use Time::Piece;

my $home_root="/fs/vnas_H";
my $home_root2="/fs/vnas/H";
my $home_root3="/fs/home/fs1/";
my @home_roots=qw(/fs/vnas_H /fs/vnas/H /fs/home/fs1/);

sub usage {
   local $, = "\n";
   print STDERR @_, "";
   $0 =~ s#.*/##;
   print STDERR "
Usage: $0 [options]

  Transform jobst output into a colorful tree of processes.
  This helps to find relationships between jobs.

NOTE:
  To change the color of the tree, set the environment variable
  PORTAGE_QSTATTREE_COLORS to a space separated list of colors.
  Valid colors include:
     black, red, green, yellow, blue, magenta, cyan, white
     variants such as bright_blue

Options:

  -u(ser) USER  Filter jobs for USER [None]
  -P REGEX      Filter jobs based on a regular expression [None]
  -g(roup) group  Filter jobs for users that are from a particular group.
                The user list will be taken from `id -nG`
                E.g.: -g nrc_ict
  -loc(altime)  Convert time from UTC to local time [don't convert time]
  -lon(gnames) WIDTH  Display WIDTH characters for the name field.
                [without option: 10; option without WIDTH: 15]
  -s(ummary)    Simply output the summary without the tree. [Don't]

  -j(obst) CMD  Use CMD as command to get job status [jobst]
                e.g. use '-jobst cat' to test on input from STDIN

  -h(elp)       print this help message
  -v(erbose)    increment the verbosity level by 1 (may be repeated)
  -d(ebug)      print debugging information

";
   exit 1;
}

use Getopt::Long;
# Note to programmer: Getopt::Long automatically accepts unambiguous
# abbreviations for all options.
my $verbose = 1;
my $jobst = "jobst";
my $name_width = 10;
GetOptions(
   "user=s"    => \my $user,
   "P=s"       => \my $regex,
   "jobst=s"   => \$jobst,
   "group=s"   => \my $group,
   "summary"   => \my $summaryOnly,
   localtime   => \my $localtime,
   "longnames:i" => \$name_width,

   help        => sub { usage },
   verbose     => sub { ++$verbose },
   quiet       => sub { $verbose = 0 },
   debug       => \my $debug,
) or usage;

$name_width = 15 if $name_width == 0;
$name_width = 6 if $name_width < 7;    # minimum name width is 7.

my %all_states;


sub max ($$) { $_[$_[0] < $_[1]] }


sub standardizeJob {
   my ($job) = @_;

   $job->{res_mem_g} = $job->{res_mem_m} / 1024;
   if ($job->{res_mem_m} < 1000) {
      $job->{res_mem_str} = sprintf("%3dM", $job->{res_mem_m});
   }
   else {
      $job->{res_mem_str} = sprintf("%3dG", ($job->{res_mem_m} + 512) / 1024);
   }

   if ($job->{h_rt} < 7200) {
      $job->{h_rt_str} = sprintf("%3dm", $job->{h_rt} / 60);
      $job->{h_rt} /= 3600;
   }
   else {
      if ($job->{h_rt} >= 10000000) {
         $job->{h_rt} = "inf";
      }
      else {
         $job->{h_rt} /= 3600;
      }
      $job->{h_rt_str} = sprintf("%4d", $job->{h_rt});
   }

   # Drop .science.gc.ca from the queue's name.
   $job->{queue} =~ s/\.sci.+?$//;

   if (defined($localtime)) {
      my $utc_date = "$job->{date} $job->{time} GMT";
      print STDERR "date=", $job->{date}, ", time=", $job->{time}, "\n" if ($debug);
      print STDERR $utc_date, "\n" if ($debug);
      my $datetime = Time::Piece->strptime($utc_date, "%F %T %Z");
      print STDERR "datetime=", $datetime, "\n" if ($debug);
      $job->{date} = $datetime->strftime("%F");
      $job->{time} = $datetime->strftime("%T");
      print STDERR "date=", $job->{date}, ", time=", $job->{time}, "\n" if ($debug);
   }
}


sub addUser {
   my ($job, $users) = @_;

   my $user = $job->{user};
   my $state = $job->{state};

   unless (defined($users->{$user})) {
      $users->{$user} = { job_count => 0, cpus => 0, mem => 0, h_rt => 0};
   }

   unless (defined($users->{$user}{states}{$state})) {
      $users->{$user}{states}{$state} = { job_count => 0, cpus => 0, mem => 0, h_rt => 0};
   }

   $users->{$user}{job_count} += 1;
   $users->{$user}{states}{$state}{job_count} += 1;

   $users->{$user}{cpus} += $job->{res_cpus} * $job->{slots};
   $users->{$user}{states}{$state}{cpus} += $job->{res_cpus} * $job->{slots};

   $users->{$user}{mem} += $job->{res_mem_g} * $job->{slots};
   $users->{$user}{states}{$state}{mem} += $job->{res_mem_g} * $job->{slots};

   $users->{$user}{h_rt} = max($users->{$user}{h_rt}, $job->{h_rt});
   $users->{$user}{states}{$state}{h_rt} = max($users->{$user}{h_rt}, $job->{h_rt});
}


sub addNode {
   my ($job, $jobs, $tree) = @_;

   # Let's create a node for that job.
   my $label = sprintf("%-8d %.3f %-*s %-7s %2d %4s %4s %-3s %s %s %23s %3s   %s",
      $job->{id},
      $job->{prior},
      $name_width,
      $job->{name},
      $job->{user},
      $job->{res_cpus},
      $job->{res_mem_str},
      $job->{h_rt_str},
      $job->{state},
      $job->{date},
      $job->{time},
      $job->{queue},
      $job->{slots},
      $job->{a});
   $label =~ s/ *$//;
   my $sub_tree = Tree::Simple->new($label);
   $jobs->{$job->{id}} = $sub_tree;

   # Does this job a sub job of another master job.
   # j13343w-0 dictated by run-parallel.sh's $WORKER_NAME
   print STDERR "id=", $job->{id}, ", name=", $job->{name}, "\n" if ($debug);
   if ($job->{name} =~ /^j(\d+)(w-\d+)?/) {
      my $parent = $1;
      print STDERR "parent=", $parent, "\n" if ($debug);
      if (exists($jobs->{$parent})) {
         print STDERR "  parent job exists.\n" if ($debug);
         $jobs->{$parent}->addChild($sub_tree);
      }
      else {
         # Humm! looks like we should have found a parent for this job.  May
         # be it's a orphan job or our regex is missing some cases.
         #warn "Unknown parent job: $line\n";
         # Though we haven't found a parent let's add it as a root, so we don't lose it...
         $tree->addChild($sub_tree);
         print STDERR "  parent job DOES NOT exist.\n" if ($debug);
      }
   }
   else {
      # This job doesn't have a master parent job thus it belongs at the
      # root of the tree.
      $tree->addChild($sub_tree);
   }
}


########################################
# Populate the tree with jobst info.
sub createJobList {
   use Tree::Simple;

   if ($group) {
      my $found = 0;
      foreach (@home_roots) {
         $found = 1 if -d "$_$group";
      }
      $found or die "Can't find group $group under root homes @home_roots";
   }

   # make a tree root.
   my $tree = Tree::Simple->new("0", Tree::Simple->ROOT);

   # This is a flat map to quickly access job's sub tree.
   my %jobs;
   my %users;

   my $splitByJob = 'sed "/^\s*[0-9]\+ / s/^/\n/"';
   local $/ = "\n\n";
   my $jobst_cmd = "$jobst -r";
   $jobst_cmd .= " -u $user" if(defined($user));
   open IN, "$jobst_cmd | $splitByJob |" or die "Can't call jobst $!";
   while (my $line = <IN>) {
      # Skip the header
      if ($line =~ /^\s*[0-9]+/) {
         # filter jobs based on a regular expression.
         next if (defined($regex) and $line !~ m/$regex/);

         my $description = $line;
         $description =~ s/\n/ /;

         my @lines = split(/\n/, $line);
         $line = shift(@lines);
         chomp($line);
         $line =~ s/^\s*//;
         $line =~ s/\s*$//;
         my ($id, $prior, $name, $user, $state, $date, $time, $queue, $slots, $a) = split(/\s+/, $line, 10);
         # retrieve full job name, if needed.
         if ($name_width > 10) {
            if ($description =~ m/.*Full jobname:\s+([^\n]*\S).*/s) {
               my $full_name = $1;
               $name = substr($full_name, 0, $name_width)
            }
         } elsif ($name_width < 10) {
            $name = substr($name, 0, $name_width)
         }
         $state = "UNK" unless($state ne "");
         $all_states{$state} += 1;
         if (!$a && $queue =~ /^\d+$/) {
            $a = $slots;
            $slots = $queue;
            $queue = "";
         }
         if ($slots !~ /^\d+$/) {
            print STDERR "Weird slots: $slots; setting to 1\n";
            $slots = 1;
         }

         $a = "" unless defined $a;
         if ($description =~ m/res_gpus?=[1-9]/) {
            $a .= " GPU";
         }


         if ($group) {
            next unless -d "$home_root$group/$user" || -d "$home_root2$group/$user";
         }

         my %job = (
            id => $id,
            prior => $prior,
            name => $name,
            user => $user,
            res_cpus => 0,
            res_mem_str => undef,
            res_mem_m => 0,
            h_rt_str => undef,
            h_rt => 0,
            state => $state,
            date => Time::Piece->strptime($date, "%m/%d/%Y")->strftime("%F"),
            time => $time,
            queue => $queue,
            slots => $slots,
            a => $a,
         );

         if ($description =~ m/.*res_cpus=(\d+).*/s) {
            $job{res_cpus} = $1;
         }
         else {
            warn "Warning: Unable to match for res_cpus", $description
               if $verbose > 1;
         }

         if ($description =~ m/.*res_mem=(\d+).*/s) {
            $job{res_mem_m} = $1;
         }
         else {
            warn "Warning: Unable to match for res_mem in ", $description
               if $verbose > 1;
         }

         if ($description =~ m/res_gpus?=[1-9]/) {
            $a .= " GPU";
         }

         # Some job may not have h_rt set.
         my $h_rt_str = "";
         if ($description =~ m/.*h_rt=(\d+).*/s) {
            $job{h_rt} = $1;
         }

         standardizeJob(\%job);

         addUser(\%job, \%users);

         addNode(\%job, \%jobs, $tree);
      }
   }
   close(IN) or die "Problem with the input stream.";

   # clean up circular references
   $tree->DESTROY();

   print STDERR "Height: " . $tree->getHeight() . "\n" if ($debug);
   print STDERR "Depth: " . $tree->getDepth() . "\n" if ($debug);
   print STDERR "Width: " . $tree->getWidth() . "\n" if ($debug);

   return $tree, %users;
}


sub createJobListJSON {
   sub queueInfo {
      #username=shpc001
      #jobstate=r
      #jobname=eccc-truehost
      #groupname=ssc_hpcs
      #jobid=15563
      #queuename=dev-be
      #--------

      my %jobstates = ();
      local $/ = "\n--------\n";
      open IN, "$jobst --format kv |" or die "Can't call jobst $!";
      while (my $line = <IN>) {
         my $jobid = $1 if ($line =~ /jobid=(\d+)/);
         my $jobstate = $1 if ($line =~ /jobstate=(\w+)/);
         my $queuename = $1 if ($line =~ /queuename=([^\n]+)/);
         $queuename ||= '';
         print "AAA", $jobid, $jobstate, $queuename, "\n" if ($debug);
         $jobstates{$jobid} = { jobid => $jobid, jobstate => $jobstate, queuename => $queuename };
      }
      return %jobstates;
   }

   sub queueInfoJSON {
      my %jobstates = ();
      my $jobst_cmd = "$jobst --format json";
      my $jobst_output = `$jobst_cmd`;
      my $jobst_json = decode_json $jobst_output;
      foreach my $node (@$jobst_json) {
         $jobstates{$node->{jobid}} = $node;
         $jobstates{$node->{jobid}}{queuename} //= 'UNK';
      }
      return %jobstates;
   }

   use Tree::Simple;

   # make a tree root.
   my $tree = Tree::Simple->new("0", Tree::Simple->ROOT);

   # This is a flat map to quickly access job's sub tree.
   my %jobs;
   my %users;

   my %jobstates = queueInfoJSON;

   my $jobst_cmd = "$jobst -f --format json";
   $jobst_cmd .= " -u $user" if(defined($user));
   $jobst_cmd .= " -g $group" if(defined($group));  # Doesn't look like this has any effect.
   my $jobst_output = `$jobst_cmd`;
   #print $jobst_output;
   my $jobst_json = decode_json $jobst_output;
   foreach my $node (@$jobst_json) {
      my $user = $node->{owner};;
      next if (defined($group) and exists($node->{group}) and $node->{group} ne $group);

      # filter jobs based on a regular expression.
      # NOTE: May be we should filter not on the full node but rather on the
      # slim down node aka the fields that we care for?
      if (defined($regex)) {
         my $node_str = encode_json($node);
         next if ($node_str !~ m/$regex/);
      }

      # Looks like we are sometimes missing some key/value.
      $node->{"parallel_environment.nslots"} ||= 0;
      $node->{"hard_resource_list.res_cpus"} ||= 0;
      $node->{"hard_resource_list.res_mem"} ||= 0;
      $node->{"hard_resource_list.h_rt"} ||= 0;

      my $t = Time::Piece->strptime($node->{submission_time}, "%a %b %e %T %Y");
      my %job = (
         id => $node->{job_number},
         prior => 0, # undef
         name => substr($node->{job_name}, 0, $name_width),
         user => $user,
         res_cpus => $node->{"hard_resource_list.res_cpus"},
         res_mem_str => undef,
         res_mem_m => $node->{"hard_resource_list.res_mem"},
         h_rt_str => undef,
         h_rt => $node->{"hard_resource_list.h_rt"},
         state => $jobstates{$node->{job_number}}{jobstate} // 'UNK',
         date => $t->strftime("%F"),
         time => $t->strftime("%T"),
         queue => $jobstates{$node->{job_number}}{queuename} // 'UNK',
         slots => $node->{"parallel_environment.nslots"},
         a => exists($node->{"hard_resource_list.res_gpus"}) ? "GPU" : '',
      );
      $all_states{$job{state}} += 1;
      $job{slots} = 1 unless defined $job{slots};
      if ($job{slots} !~ /^\d+$/) {
         print STDERR "Weird slots: ", $job{slots}, "; setting to 1\n";
         $job{slots} = 1;
      }

      standardizeJob(\%job);

      addUser(\%job, \%users);

      addNode(\%job, \%jobs, $tree);
   }

   return $tree, %users;
}



########################################
# Create a map of color per tree level.
# Note: perldoc Term::ANSIColor
sub getColors {
   my @colors;
   eval {
      eval "use Term::ANSIColor 3 qw(:constants colorvalid)" or die;
      # User defined colors.
      if (defined($ENV{PORTAGE_QSTATTREE_COLORS})) {
         my @user_colors = split(/\s+/, $ENV{PORTAGE_QSTATTREE_COLORS});
         print STDERR "Using user colors: " . join(", ", @user_colors) . "\n" if ($debug);
         # Validate user's colors.
         map { Term::ANSIColor::colorvalid($_) or die "$_ is not a valid ANSIColor!"; } @user_colors;
         @colors = map { Term::ANSIColor::color($_); } @user_colors;
      }
      1;
   }
   or do {
      warn "WARNING: User colors not supported on this system\n" if (defined($ENV{PORTAGE_QSTATTREE_COLORS}));
      use Term::ANSIColor 2 qw(:constants);
      # Creating default colors.
      @colors = map { Term::ANSIColor::color($_); } ( 'red' , 'green' , 'yellow' , 'blue' , 'magenta' , 'cyan',
                                                      'bright_red' , 'bright_green' , 'bright_yellow' ,
                                                      'bright_blue' , 'bright_magenta' , 'bright_cyan' );
   };

   return @colors;
}



########################################
# Display a job tree.
sub displayJobs {
   my $jobs = shift;
   my @colors = @_;

   my $max_height = $jobs->getHeight() - 1;

   my $filter = sub {
      my $tree = shift ;

      if('Tree::Simple' eq ref $tree) {
         my $counter = 0 ;

         # Let's fix the indentation of entries.
         print STDERR "tree node: " . $tree->getNodeValue() . "\n" if ($debug);
         foreach my $t (@{$tree->{_children}}) {
            my $depth = $max_height - $t->getDepth() - 1;
            print STDERR "depth: " . $depth . "\n" if ($debug);
            $t->{_node} =~ s/ /" " . "   " x $depth/e;
            print STDERR "t _node: " . $t->{_node} . "\n" if ($debug);
         }
         # If we don't do the following, which was the example on cpan about
         # DumpTree, the output tree will contain krud that makes the three
         # really hard to read.  The following produces the exact output we are
         # looking for.
         return
            (
             # The current node will be replace by an array.
             'ARRAY'
             # The current node is replaced by the children of the current node.
             , $tree->{_children}
             # DumpTree will ouput the array index before each sub tree which
             # is kinda UGLY.  Let's create a map that translates indices into
             # a better label.  That label will be the string we assigned to
             # that node when building the tree earlier.
             , map { [$counter++, $_->{_node} ] } @{$tree->{_children}} # index to label generation
            ) ;
      }

      return(Data::TreeDumper::DefaultNodesToDisplay($tree)) ;
   };

   use Data::TreeDumper;
   $Data::TreeDumper::Useascii          = 1;
   $Data::TreeDumper::Displayobjecttype = 0;
   $Data::TreeDumper::Displayaddress    = 0;

   # Let's display the header
   print "   job-ID" . "   " x $max_height . "prior    name" . " " x ($name_width-7)
         . "  user  cpus mem time st    submit/start at            queue          slots ja-task-ID\n";
   print "--------" . "---" x $max_height . " ----- -------" . "-" x ($name_width-7)
         . " ------- -- ---- ---- --- ------------------- ----------------------- ----- ----------";
   print DumpTree($jobs,
      '',
      COLOR_LEVELS => [\@colors, ''],
      NO_WRAP => 1,
      FILTER => \&$filter);
   print Term::ANSIColor::color('reset');
}


my $epilogue_header = "%7s %-20s %5s %5s %9s %12s\n";

sub epilogue {
   sub total {
      # Tally across users, job information that meet the filter.
      my $keep = shift;
      my %users = @_;
      my ($total_job_count, $total_cpus, $total_mem, $max_h_rt) = (0, 0, 0, 0);

      map {
         # For each user, tally state information where the state passes the user's keep-filter.
         my $states = $_->{states};
         map {
            # Tally information.
            $total_job_count += $_->{job_count};
            $total_cpus      += $_->{cpus};
            $total_mem       += $_->{mem};
            $max_h_rt        = max($max_h_rt, $_->{h_rt});
         }
         map {
            # Extract the state's information.
            my $state = $_;
            $states->{$state};
         }
         grep {
            # Keep the states that the user needs.
            my $state = $_;
            $keep->($state);
         }
         keys %{$states};
      }
      values %users;

      return {
         group => "",
         job_count => $total_job_count,
         cpus => $total_cpus,
         mem => $total_mem,
         h_rt => $max_h_rt
      };
   };

   my $jobs  = shift;
   my $color = shift;
   my %users = @_;

   my $max_height = $jobs->getHeight() - 1;

   # Highlight user stats.
   use Env qw(LOGNAME);


   my @usernames = keys %users;

   foreach my $status (keys %all_states) {
      $users{$status} = total(sub { my $a = shift; $a =~ m/^$status$/; }, %users);
   }
   #$users{running} = total(sub { my $a = shift; $a =~ m/^r/; }, %users);
   #$users{qw}   = total(sub { my $a = shift; $a =~ m/^qw/; }, %users);
   #$users{dr}   = total(sub { my $a = shift; $a =~ m/^dr/; }, %users);
   #$users{Eqw}   = total(sub { my $a = shift; $a =~ m/Eqw/; }, %users);
   $users{TOTAL} = total(sub { my $a = shift; $a !~ m/Eqw/; }, %users);

   # Find out the group for each user, to print in the tally only
   foreach my $name (@usernames) {
      my $home_link = `ls -l /home/$name`;
      print STDERR "HOME_LINK=$home_link\n" if ($debug);
      if ($home_link =~ m#$home_root(.*?)/+$name#) {
         $users{$name}{group} = $1;
      }
      elsif ($home_link =~ m#$home_root2(.*?)/+$name#) {
         $users{$name}{group} = $1;
      }
      elsif ($home_link =~ m#$home_root3(.*?)/+$name#) {
         $users{$name}{group} = $1;
      }
      else {
         $users{$name}{group} = "";
      }
   }

   # Sort user names by group, and then by user name within the group
   @usernames =
      map { $_->[1] }
      sort { $a->[0] eq $b->[0] ? $a->[1] cmp $b->[1] : $a->[0] cmp $b->[0] }
      map { [$users{$_}{group}, $_] }
      @usernames;

   print "--------", "---" x $max_height, "-" x (90+$name_width), "\n" unless($summaryOnly);

   sub printDashes() {
      printf($epilogue_header, '-' x 7, '-' x 20, '-' x 5, '-' x 5, '-' x 9, '-' x 12);
   }

   # printSummaryLine($name, $color, %stats);
   sub printSummaryLine {
      my $format = "%7s %--20s %5d %5d %9.2f %12.2f\n";

      my $name = shift;
      my $color = shift;
      my %stats = @_;
      return if !$stats{job_count};
      print $color if $LOGNAME eq $name;
      printf($format, $name, $stats{group}, $stats{job_count}, $stats{cpus}, $stats{mem}, $stats{h_rt});
      print Term::ANSIColor::color('reset');
   }

   # print a summary line for each user
   printf($epilogue_header, 'user', 'group', '#jobs', 'cpus', 'mem (G)', 'max rt (H)');
   printDashes();
   my $print_TOTAL = 0;
   foreach my $name (@usernames) {
      printSummaryLine($name, $color, %{$users{$name}});
   }
   printDashes();

   # print a summary line for each status
   printf($epilogue_header, 'status', '', '#jobs', 'cpus', 'mem (G)', 'max rt (H)');
   printDashes();
   foreach my $name (keys %all_states) {
      printSummaryLine($name, "", %{$users{$name}});
   }
   printDashes();

   # print a global total line
   printSummaryLine("TOTAL", "", %{$users{TOTAL}});

   # For safety, let's make sure the color scheme is reseted before we exit.
   print Term::ANSIColor::color('reset');
}



# Select the proper parse based on jobst's version.
# This is a crude way of doing this since there is no --version for jobst.
my $jobst_help = `$jobst -h`;
my $joblist = undef;
if ($jobst_help =~ m/json/) {
   $joblist = \&createJobListJSON;
}
else {
   $joblist = \&createJobList;
}
my ($jobs, %users) = &$joblist;

my @colors = getColors;
displayJobs($jobs, @colors) unless($summaryOnly);
epilogue($jobs, $colors[1], %users);

