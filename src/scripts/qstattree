#!/usr/bin/env perl
# $Id$

# @file qstattree.pl
# @brief Creates a tree from qstat's output.
#
# @author Samuel Larkin
#
# Technologies langagieres interactives / Interactive Language Technologies
# Inst. de technologie de l'information / Institute for Information Technology
# Conseil national de recherches Canada / National Research Council Canada
# Copyright 2011, Sa Majeste la Reine du Chef du Canada /
# Copyright 2011, Her Majesty in Right of Canada


use strict;
use warnings;

sub usage {
   local $, = "\n";
   print STDERR @_, "";
   $0 =~ s#.*/##;
   print STDERR "
Usage: $0 [options] [filter]

  Transforms qstat's output into a colorful tree of processes.
  Helps to find processes relationships.

  filter is any valid string that qstatn accepts.

NOTE:
  To change the color of the tree, you can set the environment variable
  PORTAGE_QSTATTREE_COLORS with a space separated list of colors.
  Valid colors are: 
     black, red, green, yellow, blue, magenta, cyan or white

Options:

  -h(elp)       print this help message
  -v(erbose)    increment the verbosity level by 1 (may be repeated)
  -d(ebug)      print debugging information


";
   exit 1;
}

use Getopt::Long;
# Note to programmer: Getopt::Long automatically accepts unambiguous
# abbreviations for all options.
my $verbose = 1;
GetOptions(
   help        => sub { usage },
   verbose     => sub { ++$verbose },
   quiet       => sub { $verbose = 0 },
   debug       => \my $debug,
) or usage;

my $filter = "";
if ( @ARGV > 0 ) {
   $filter = "@ARGV";
}



########################################
# Populate the tree with qstat info.
use Tree::Simple;

# make a tree root.
my $tree = Tree::Simple->new("0", Tree::Simple->ROOT);

# This is a flat map to quickly access job's sub tree.
my %jobs;
# We need to capture qstat's footer.
my $footer;
open IN, "qstatn '$filter' |" or die "Can't call qstatn: $!";
while (my $line = <IN>) {
   # Skip the header
   if ($line =~ /^[0-9]+/) {
      chomp($line);
      my ($id, $name, $jobname, @a) = split(/\s+/, $line);

      # Let's create a node for that job.
      my $sub_tree = Tree::Simple->new("$line");
      $jobs{$id} = $sub_tree;

      # Does this job a sub job of another master job.
      if ($jobname =~ /^J(\d+(-\d+)?)-/) {
         my $parent = $1;
         if (exists($jobs{$parent})) {
            $jobs{$parent}->addChild($sub_tree);
         }
         else {
            # Humm! looks like we should have found a parent for this job.  May
            # be it's a orphan job or our regex is missing some cases.
            warn "Unknown parent job: $line\n";
            # Though we haven't found a parent let's add it as a root, so we don't lose it...
            $tree->addChild($sub_tree);
         }
      }
      else {
         # This job doesn't have a master parent job thus it belongs at the
         # root of the tree.
         $tree->addChild($sub_tree);
      }
   }
   # We've found some footer info, let's record it.
   elsif ($line =~ /^\|\|\|/) {
      $footer .= $line;
   }
}
close(IN) or die "Problem with the input stream.";

# clean up circular references
$tree->DESTROY();


print STDERR "Height: " . $tree->getHeight() . "\n" if ($debug);
print STDERR "Depth: " . $tree->getDepth() . "\n" if ($debug);


########################################
# Create a map of color per tree level.
# Note: perldoc Term::ANSIColor
use Term::ANSIColor 3 qw(:constants colorvalid);
# Creating default colors.
my @colors = map { Term::ANSIColor::color($_); } ( 'red' , 'green' , 'yellow' , 'blue' , 'magenta' , 'cyan');

# User defined colors.
if (defined($ENV{PORTAGE_QSTATTREE_COLORS})) {
   my @user_colors = split(/\s+/, $ENV{PORTAGE_QSTATTREE_COLORS});
   print STDERR "Using user colors: " . join(", ", @user_colors) . "\n" if ($debug);
   # Validate user's colors.
   map { Term::ANSIColor::colorvalid($_) or die "$_ is not a valid ANSIColor!"; } @user_colors;
   @colors = map { Term::ANSIColor::color($_); } @user_colors;
}


########################################
# Display that qstat tree.
use Data::TreeDumper;
$Data::TreeDumper::Useascii          = 1;
$Data::TreeDumper::Maxdepth          = 5;
$Data::TreeDumper::Displayobjecttype = 0;
$Data::TreeDumper::Displayaddress    = 0;

# Let's display the header
print "   " x ($tree->getHeight() - 1) . "                                             Req'd  Req'd   Elap\n";
print "Job ID" . "   " x ($tree->getHeight() - 1) . "    Username Jobname        SessID NDS Memory Time  S Time\n";
print DumpTree($tree,
   "---------" . "---" x ($tree->getHeight() - 1) . " -------- -------------- ------ --- ------ ----- - -----",
   COLOR_LEVELS => [\@colors, ''],
   NO_WRAP => 1,
   FILTER => sub {
      my $tree = shift ;

      if('Tree::Simple' eq ref $tree)
      {
         my $counter = 0 ;

         # Let's fix the indentation of entries.
         foreach my $t (@{$tree->{_children}}) {
            my $depth = ($tree->getHeight() - $tree->getDepth()) / 2;
            $t->{_node} =~ s/ /" " . "   " x $depth/e;
         }
         # If we don't do the following, which was the example on cpan about
         # DumpTree, the output tree will contain krud that makes the three
         # really hard to read.  The following produces the exact output we are
         # looking for.
         return
            (
             # The current node will be replace by an array.
             'ARRAY'
             # The current node is replaced by the children of the current node.
             , $tree->{_children}
             # DumpTree will ouput the array index before each sub tree which
             # is kinda UGLY.  Let's create a map that translates indices into
             # a better label.  That label will be the string we assigned to
             # that node when building the tree earlier.
             , map { [$counter++, $_->{_node} ] } @{$tree->{_children}} # index to label generation
            ) ;
      }

      return(Data::TreeDumper::DefaultNodesToDisplay($tree)) ;
   });
print Term::ANSIColor::color('reset');

# Highlight user stats.
use Env qw(LOGNAME);
# Highlight user stats.
my $noColor = Term::ANSIColor::color('reset');
$footer =~ s/($LOGNAME [0-9]+)/$colors[0]$1$noColor/;
$footer =~ s/([0-9]+ free)/$colors[0]$1$noColor/;
print $footer;

# For safety, let's make sure the color scheme is reseted before we exit.
print Term::ANSIColor::color('reset');

